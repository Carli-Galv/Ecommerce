{"version":3,"sources":["components/MenuMobile.js","components/Carrito.js","components/NavBarMobile.js","components/ProductoMobile.js","App.js","serviceWorker.js","index.js"],"names":["MenuMobile","className","Carrito","NavBarMobile","useState","abrirMenu","setAbrirMenu","disteClick","numero","onClick","ProductoMobile","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKAaeA,MAXf,WACI,OACI,kBAAC,WAAD,KACI,yBAAKC,UAAU,oBACX,4BAAQA,UAAU,cAAlB,aACA,4BAAQA,UAAU,cAAlB,eACA,4BAAQA,UAAU,cAAlB,eCADC,MAPf,WACI,OACI,yBAAKD,UAAU,aC8BRE,MA7Bf,WAAyB,IAAD,EACWC,mBAAS,GADpB,mBACfC,EADe,KACJC,EADI,KAEpB,SAASC,EAAWC,GACE,IAAdH,GAAiC,IAAdA,EACnBC,EAAaD,EAAY,IAEV,IAAXG,GACIF,EAAaD,EAAY,GAElB,IAAXG,GACAF,EAAaD,EAAY,IAGrC,OACI,kBAAC,WAAD,KACI,yBAAKJ,UAAU,OACX,uBAAGA,UAAU,sBACb,8BAAM,iCACN,yBAAKA,UAAU,aACX,uBAAGA,UAAU,mBAAmBQ,QAAS,kBAAMF,EAAW,MAC1D,uBAAGN,UAAU,4BAA4BQ,QAAS,kBAAMF,EAAW,QAG5D,IAAdF,EAAmB,kBAAC,EAAD,MAAkB,8BACvB,IAAdA,EAAmB,kBAAC,EAAD,MAAiB,gCCZlCK,MAdf,WACI,OACI,kBAAC,WAAD,KACI,yBAAKT,UAAU,YACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,aAAhB,uBACA,0BAAMA,UAAU,UAAhB,WACA,4BAAQA,UAAU,SAAlB,0BCULU,MAhBf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKV,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,mBACb,4BAAQA,UAAU,SAAlB,cCAUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a6fd8a8d.chunk.js","sourcesContent":["import React,{Fragment} from 'react';\r\n\r\nfunction MenuMobile(){\r\n    return(\r\n        <Fragment>\r\n            <div className=\"menu-desplegable\">\r\n                <button className=\"boton-menu\">Productos</button>\r\n                <button className=\"boton-menu\">Promociones</button>\r\n                <button className=\"boton-menu\">Contacto</button>\r\n            </div>\r\n        </Fragment>    \r\n    );\r\n}\r\nexport default MenuMobile;","import React from 'react';\r\nfunction Carrito(){\r\n    return(\r\n        <div className=\"carrito\">\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Carrito;","import React, {Fragment, useState} from 'react';\r\nimport MenuMobile from './MenuMobile';\r\nimport Carrito from './Carrito';\r\n\r\nfunction NavBarMobile() {\r\n    var [abrirMenu, setAbrirMenu]= useState(0)\r\n    function disteClick(numero){\r\n        if (abrirMenu === 1 || abrirMenu === 2){\r\n            setAbrirMenu(abrirMenu = 0);\r\n        } else{\r\n            if (numero === 1){\r\n                    setAbrirMenu(abrirMenu = 1);\r\n                }\r\n            if (numero === 2){\r\n                setAbrirMenu(abrirMenu = 2);}\r\n            }\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <div className=\"nav\">\r\n                <i className=\"fas fa-store logo\"></i>\r\n                <form><input/></form>\r\n                <div className=\"menu-cart\">\r\n                    <i className=\"fas fa-bars icon\" onClick={() => disteClick(1)}></i>\r\n                    <i className=\"fas fa-shopping-cart icon\" onClick={() => disteClick(2)}></i>\r\n                </div>\r\n            </div>\r\n            {abrirMenu === 1 ? (<MenuMobile/>) : (<div></div>)}\r\n            {abrirMenu === 2 ? (<Carrito/>  ) : (<div></div>)}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default NavBarMobile;","import React,{Fragment} from 'react';\r\n\r\nfunction ProductoMobile(){\r\n    return(\r\n        <Fragment>\r\n            <div className=\"producto\">\r\n                <div className=\"foto\"/>\r\n                <div className=\"producto-info\">\r\n                    <span className=\"subtitulo\">Nombre del Producto</span>\r\n                    <span className=\"precio\">$ 21,99</span>\r\n                    <button className=\"boton\">Agregar al carrito</button>\r\n                </div>\r\n            </div>\r\n        </Fragment>    \r\n    );\r\n}\r\nexport default ProductoMobile;","import React from 'react';\nimport NavBarMobile from './components/NavBarMobile'\nimport ProductoMobile from './components/ProductoMobile'\n\nfunction App() {\n  return (\n    <div>\n      <NavBarMobile/>\n      <div className=\"productos\">\n        <ProductoMobile/>\n        <ProductoMobile/>\n        <div className=\"boton-container\">\n          <button className=\"boton\">MÃ¡s</button>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}